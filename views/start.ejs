<!DOCTYPE html>
<html lang="en">
	<head>
		<title>Face tracker</title>
        <meta charset="utf-8">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
        <link rel="stylesheet" type="text/css" href="/start.css">
        <script src="https://cdn.webrtc-experiment.com/RecordRTC.js"></script>
        <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
		<style>
			@import url(https://fonts.googleapis.com/css?family=Lato:300italic,700italic,300,700);
			
			#overlay {
				position: absolute;
				top: 0px;
				left: 0px;
				-o-transform : scaleX(-1);
				-webkit-transform : scaleX(-1);
				transform : scaleX(-1);
				-ms-filter : fliph; /*IE*/
				filter : fliph; /*IE*/

				width : 600px;
				height : 450px;
			}

			#videoel {
				-o-transform : scaleX(-1);
				-webkit-transform : scaleX(-1);
				transform : scaleX(-1);
				-ms-filter : fliph; /*IE*/
				filter : fliph; /*IE*/

				width : 600px;
				height : 450px;
			}
			
			#container {
				position : relative;
				width : 370px;
				/*margin : 0px auto;*/
			}
			
			#sketch, #filter {
				display: none;
			}
			
			h2 {
				font-family: 'Lato';
				font-weight : 600;
				margin-top: 30px;
				color: black;
			}
			
			.btn {
				font-family: 'Lato';
				font-size: 16px;
			}

			#controls {
				text-align : center;
			}

			#emotion_icons {
				height: 50px;
				margin-bottom: 20px;
			}

			.emotion_icon {
				width : 40px;
				height : 40px;
				margin-top: 5px;
				/*margin-left : 13px;*/
				margin-left : 35px;
			}

			#emotion_chart, #emotion_icons {
				margin: 0 auto;
				width : 400px;
				height: 100px;
			}

			#icon1, #icon2, #icon3, #icon4, #icon5, #icon6 {
				visibility : hidden;
			}

			/* d3 */
			.bar {
				fill : steelblue;
				fill-opacity : .9;
			}

		</style>
		<script>
			// getUserMedia only works over https in Chrome 47+, so we redirect to https. Also notify user if running from file.
			if (window.location.protocol == "file:") {
				alert("You seem to be running this example directly from a file. Note that these examples only work when served from a server or localhost due to canvas cross-domain restrictions.");
			} else if (window.location.hostname !== "localhost" && window.location.protocol !== "https:"){
				window.location.protocol = "https";
			}
		</script>
		<script type="text/javascript">

			var _gaq = _gaq || [];
			_gaq.push(['_setAccount', 'UA-32642923-1']);
			_gaq.push(['_trackPageview']);

			(function() {
				var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
				ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
				var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
			})();

		</script>
	</head>
	<body>
        <script src="/utils.js"></script>
		<script src="/clmtrackr.js"></script>
		<script src="/model_pca_20_svm_emotionDetection.js"></script>
		<script src="/Stats.js"></script>
		<script src="/d3.min.js"></script>
		<script src="/emotion_classifier.js"></script>
		<script src="/emotionmodel.js"></script>

		<nav>
            <h3 id="logo">Interview Trainer</h3>
		</nav>
		
		<div class="content">
			<div class="emoDetection">
				<h2>Emotion detection</h2>
				<div id="container">
					<video style="border-radius: 9px;" id="videoel" width="400" height="300" preload="auto" loop>
					</video>
					<canvas id="overlay" width="400" height="300"></canvas>
				</div>
				<canvas id="sketch" width="400" height="300"></canvas>
			</div>

			<div id="chartContainer" ></div>
			<div class="emotionContainer">
				<h2>Graph emotion</h2>
				<div id="emotion_icons">
					<img class="emotion_icon" id="icon1" src="/media/icon_angry.png">
					<img class="emotion_icon" id="icon2" src="/media/icon_sad.png">
					<img class="emotion_icon" id="icon3" src="/media/icon_surprised.png">
					<img class="emotion_icon" id="icon4" src="/media/icon_happy.png">
				</div>
				<div id='emotion_chart'></div>
			</div>
			<!-- <div id="controls">
				<input class="btn" type="button" value="wait, loading video" disabled="disabled" onclick="startVideo()" id="btn-start-recording"></input>
				<input class="btn" type="button" value="Stop" onclick="stopVideo()" id="btn-stop-recording"></input>
			</div> -->
		</div>
		<div class="speechToText">
			<button onclick="startVideo()" id='btn-start-recording' class='btn btn-primary'>Start Recording</button>
			<button onclick="stopVideo()" id='btn-stop-recording' class='btn btn-danger' disabled>Stop Recoding</button>
			<button id='btn-check' class='btn btn-info' disabled>Analyze!</button>
			<br>
		</div>

		<div class="questionResponse">
			<% var a = ["Tell me about yourself!", "Why should we hire you?", "What is your greatest strength?", "What is your greatest weakness?", "Why do you want to leave (or have left) your current job?", "Why do you want this job?", "How do you handle stress and pressure?", "Describe a difficult work situation or project and how you overcame it.", "What are your goals for the future?"] %>
			<% var random = Math.floor(Math.random() * 9) %>
				Question: <%= a[0] %>
			<br>
			<span id='message'>
			</span>
		</div>
		<div class="footer">
			<p style="font-size: 16px;">&copy; 2020 Hack and Roll Interview Trainer</p>
		</div>

		<script>
			var emotionGraph = document.querySelector('.emotionContainer');
			var finalGraph = document.querySelector('#chartContainer');
			finalGraph.style.display = 'none';
			finalGraph.style.visibility = 'hidden';

			var message = document.querySelector('#message');
			var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;
			var SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList;

			var grammar = '#JSGF V1.0;'

			var recognition = new SpeechRecognition();
			var speechRecognitionList = new SpeechGrammarList();

			speechRecognitionList.addFromString(grammar, 1);
			recognition.grammars = speechRecognitionList;
			recognition.lang = 'en-US';
			recognition.interimResults = false;
			recognition.continuous = true;
			recognition.onresult = function(event) {
				var last = event.results.length - 1;
				var command = event.results[last][0].transcript;
				message.textContent += command + ".";
			};

			recognition.onerror = function(event) {
				message.textContent = 'Error occurred in recognition: ' + event.error;
			}

			var vid = document.getElementById('videoel');
			var overlay = document.getElementById('overlay');
			var overlayCC = overlay.getContext('2d');
			
			/********** check and set up video/webcam **********/

			function enablestart() {
				var startbutton = document.getElementById('btn-start-recording');
				startbutton.value = "start";
				startbutton.disabled = null;
			}
			
			/*var insertAltVideo = function(video) {
				if (supports_video()) {
					if (supports_ogg_theora_video()) {
						video.src = "../media/cap12_edit.ogv";
					} else if (supports_h264_baseline_video()) {
						video.src = "../media/cap12_edit.mp4";
					} else {
						return false;
					}
					//video.play();
					return true;
				} else return false;
			}*/
			navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
			window.URL = window.URL || window.webkitURL || window.msURL || window.mozURL;

			// check for camerasupport
			if (navigator.getUserMedia) {
				// set up stream
				
				var videoSelector = {video : true};
				if (window.navigator.appVersion.match(/Chrome\/(.*?) /)) {
					var chromeVersion = parseInt(window.navigator.appVersion.match(/Chrome\/(\d+)\./)[1], 10);
					if (chromeVersion < 20) {
						videoSelector = "video";
					}
				};
			
				navigator.getUserMedia(videoSelector, function( stream ) {
					if (vid.mozCaptureStream) {
						vid.mozSrcObject = stream;
					} else {
						//vid.src = (window.URL && window.URL.createObjectURL(stream)) || stream;
						vid.srcObject = (stream)
					}
					vid.play();
				}, function() {
					//insertAltVideo(vid);
					alert("There was some problem trying to fetch video from your webcam. If you have a webcam, please make sure to accept when the browser asks for access to your webcam.");
				});
			} else {
				//insertAltVideo(vid);
				alert("This demo depends on getUserMedia, which your browser does not seem to support. :(");
			}

			vid.addEventListener('canplay', enablestart, false);
			
			/*********** setup of emotion detection *************/

			var ctrack = new clm.tracker({useWebGL : true});
			var time = null;
			ctrack.init(pModel);

			function startVideo() {
				// start video
				time = Date.now();
				vid.play();
				recognition.start();
				
				// Enable stop recording button
				document.getElementById('btn-stop-recording').disabled = false;
				document.getElementById('btn-start-recording').disabled = true;

				// start tracking
				ctrack.start(vid);
				// start loop to draw face
				drawLoop();
			}
			
			function stopVideo() {
				// start video
				vid.pause();
				recognition.stop();

				// Enable start recording button
				document.getElementById('btn-start-recording').disabled = true;
				// Enable stop recording button
				document.getElementById('btn-stop-recording').disabled = true;
				document.getElementById('btn-check').disabled = false;


			}
			
			function drawLoop() {
				requestAnimFrame(drawLoop);
				overlayCC.clearRect(0, 0, 400, 300);
				//psrElement.innerHTML = "score :" + ctrack.getScore().toFixed(4);
				if (ctrack.getCurrentPosition()) {
					ctrack.draw(overlay);
				}

				var cp = ctrack.getCurrentParameters();
				
				var er = ec.meanPredict(cp);
				if (er) {
					updateData(er);
					for (var i = 0;i < er.length;i++) {
						if (er[i].value > 0.4) {
							document.getElementById('icon'+(i+1)).style.visibility = 'visible';
						} else {
							document.getElementById('icon'+(i+1)).style.visibility = 'hidden';
						}
					}
				}
			}

			var ec = new emotionClassifier();
			ec.init(emotionModel);
			var emotionData = ec.getBlank();	
			
			/************ d3 code for barchart *****************/

			var margin = {top : 20, right : 20, bottom : 10, left : 40},
				width = 400 - margin.left - margin.right,
				height = 200 - margin.top - margin.bottom;

			var barWidth = 30;

			var formatPercent = d3.format(".0%");
			
			var x = d3.scale.linear()
				.domain([0, ec.getEmotions().length]).range([margin.left, width+margin.left]);

			var y = d3.scale.linear()
				.domain([0,1]).range([0, height]);

			var svg = d3.select("#emotion_chart").append("svg")
				.attr("width", width + margin.left + margin.right)
				.attr("height", height + 50 + margin.top + margin.bottom)
			
			svg.selectAll("rect").
				data(emotionData).
				enter().
				append("svg:rect").
				attr("x", function(datum, index) { return x(index); }).
				attr("y", function(datum) { return height - y(datum.value); }).
				attr("height", function(datum) { return y(datum.value); }).
				attr("width", barWidth).
				attr("fill", "#2d578b");

			svg.selectAll("text.labels").
				data(emotionData).
				enter().
				append("svg:text").
				attr("x", function(datum, index) { return x(index) + barWidth; }).
				attr("y", function(datum) { return height - y(datum.value); }).
				attr("dx", -barWidth/2).
				attr("dy", "1.5em").
				attr("text-anchor", "middle").
				text(function(datum) { return datum.value;}).
				attr("fill", "black").
				attr("class", "labels");
			
			svg.selectAll("text.yAxis").
				data(emotionData).
				enter().append("svg:text").
				attr("x", function(datum, index) { return x(index) + barWidth; }).
				attr("y", height).
				attr("dx", -barWidth/2).
				attr("text-anchor", "middle").
				attr("style", "font-size: 12").
				text(function(datum) { return datum.emotion;}).
				attr("transform", "translate(0, 18)").
				attr("class", "yAxis");

			var angry = [];
			var sad = [];
			var surprise = [];
			var happy = [];
			function updateData(data) {
				// update
				var rects = svg.selectAll("rect")
					.data(data)
					.attr("y", function(datum) { return height - y(datum.value); })
					.attr("height", function(datum) { return y(datum.value); });
				var texts = svg.selectAll("text.labels")
					.data(data)
					.attr("y", function(datum) { return height - y(datum.value); })
					.text(function(datum) { return datum.value.toFixed(1);});
				
				var angryData = { y: data[0].value };
				var sadData = { y: data[1].value };
				var surpriseData = { y: data[2].value };
				var happyData = { y: data[3].value };

				angry.push(angryData);
				sad.push(sadData);
				surprise.push(surpriseData);
				happy.push(happyData);

				// enter 
				rects.enter().append("svg:rect");
				texts.enter().append("svg:text");

				// exit
				rects.exit().remove();
				texts.exit().remove();
			}

			/******** stats ********/

			stats = new Stats();
			stats.domElement.style.position = 'absolute';
			stats.domElement.style.top = '0px';
			document.getElementById('container').appendChild( stats.domElement );

			// update stats on every iteration
			document.addEventListener('clmtrackrIteration', function(event) {
				stats.update();
			}, false);

			// ==============================================================
			$(document).ready(function() {
				var urlGrammarCheck = "https://api.textgears.com/check.php";
				$('#btn-check').click(function(){
						emotionGraph.style.visibility = 'hidden';
						emotionGraph.style.display = 'none';
						finalGraph.style.visibility = 'visible';
						finalGraph.style.display = 'inline';

						var chart = new CanvasJS.Chart("chartContainer", {
							title: {
								text: "Emotion Analysis Graph"
							},
							axisX: {
								valueFormatString: ""
							},
							axisY2: {
								title: "Intensity"
							},
							toolTip: {
								shared: true
							},
							legend: {
								cursor: "pointer",
								verticalAlign: "top",
								horizontalAlign: "center",
								dockInsidePlotArea: true,
								itemclick: toogleDataSeries
							},
							data: [{
								type:"line",
								axisYType: "secondary",
								name: "Angry",
								showInLegend: true,
								markerSize: 0,
								dataPoints: angry
							},
							{
								type: "line",
								axisYType: "secondary",
								name: "Sad",
								showInLegend: true,
								markerSize: 0,
								dataPoints: sad
							},
							{
								type: "line",
								axisYType: "secondary",
								name: "Surprised",
								showInLegend: true,
								markerSize: 0,
								dataPoints: surprise
							},
							{
								type: "line",
								axisYType: "secondary",
								name: "Happy",
								showInLegend: true,
								markerSize: 0,
								dataPoints: happy
							}]
						});
						chart.render();

						function toogleDataSeries(e){
							if (typeof(e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
								e.dataSeries.visible = false;
							} else{
								e.dataSeries.visible = true;
							}
							chart.render();
						}
					
					this.disabled = true;
					$.ajax({
						url: urlGrammarCheck,
						data: {
							text: message.textContent.trim(),
							key: 'wTZGURy3SHOYjHyR'
						},
						type: 'POST',
						success: function(result) {
							var initialMessage = message.textContent    .trim();
							var finalMessage = 'Your response: ';
							var prev = 0;
							var temp = 0;
							result.errors.forEach(error => {
								const change = error.offset + error.length;
								const suggestion = error.better[0];
								finalMessage += initialMessage.substring(temp , prev + error.offset) + "<span class='highlight' title=" + suggestion
										+ ">" + initialMessage.substring(prev + error.offset, prev + change) + "</span>";
								temp = prev + change;
							});
							finalMessage += initialMessage.substring(temp);
							document.getElementById('message').innerHTML = finalMessage;
							document.getElementById('message').style.display = 'block';

						},
						error: function(errors) {
							console.log(error);
						}
					})
				})
			})

		</script>
		<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
	</body>
</html>
